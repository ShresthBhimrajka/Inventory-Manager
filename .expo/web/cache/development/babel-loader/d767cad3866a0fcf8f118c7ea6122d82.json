{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Documents\\\\GitHub\\\\Inventory-Manager\\\\screens\\\\RecordScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport firebase from 'firebase';\nimport { Colors } from \"../assets/Colors\";\nimport Card from \"../components/Card\";\n\nvar RecordScreen = function RecordScreen(_ref) {\n  var route = _ref.route;\n  var orgname = route.params.orgname;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      recData = _useState2[0],\n      setRecData = _useState2[1];\n\n  useEffect(function () {\n    try {\n      var rec = firebase.firestore().collection('organizations').doc(orgname).collection('records').onSnapshot(function (querySnapshot) {\n        var data = [];\n        querySnapshot.forEach(function (documentSnapshot) {\n          data.push(_objectSpread(_objectSpread({}, documentSnapshot.data()), {}, {\n            key: documentSnapshot.id\n          }));\n        });\n        setRecData(data.sort(function (a, b) {\n          return parseInt(b['mil']) - parseInt(a['mil']);\n        }));\n      });\n      return function () {\n        return rec;\n      };\n    } catch (err) {\n      Alert.alert('Records Error !');\n    }\n  }, []);\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    return React.createElement(Card, {\n      style: styles.item,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      adjustsFontSizeToFit: true,\n      numberOfLines: 1,\n      style: styles.cardText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }, \"ID:   \", item.id), React.createElement(Text, {\n      adjustsFontSizeToFit: true,\n      numberOfLines: 1,\n      style: styles.cardText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, \"Name: \", item.name), React.createElement(Text, {\n      adjustsFontSizeToFit: true,\n      numberOfLines: 1,\n      style: styles.cardText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }\n    }, \"Quantity: \", item.quantity), React.createElement(Text, {\n      adjustsFontSizeToFit: true,\n      numberOfLines: 1,\n      style: styles.cardText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, \"Date: \", item.datetime), React.createElement(Text, {\n      adjustsFontSizeToFit: true,\n      numberOfLines: 1,\n      style: styles.cardText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }, \"Employee Name: \", item.empname), React.createElement(Text, {\n      adjustsFontSizeToFit: true,\n      numberOfLines: 1,\n      style: styles.cardText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }\n    }, \"Employee Id: \", item.empid), React.createElement(Text, {\n      adjustsFontSizeToFit: true,\n      numberOfLines: 1,\n      style: styles.cardText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, \"In/Ex: \", item.inex));\n  };\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, React.createElement(FlatList, {\n    data: recData,\n    renderItem: renderItem,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: Colors.primaryBackgroud,\n    padding: 10\n  },\n  item: {\n    flex: 1,\n    width: 300,\n    alignItems: 'flex-start',\n    justifyContent: 'center',\n    paddingVertical: 10,\n    margin: '5%'\n  },\n  cardText: {\n    textAlign: 'left'\n  }\n});\nexport default RecordScreen;","map":{"version":3,"sources":["C:/Users/Dell/Documents/GitHub/Inventory-Manager/screens/RecordScreen.js"],"names":["React","useState","useEffect","firebase","Colors","Card","RecordScreen","route","orgname","params","recData","setRecData","rec","firestore","collection","doc","onSnapshot","querySnapshot","data","forEach","documentSnapshot","push","key","id","sort","a","b","parseInt","err","Alert","alert","renderItem","item","styles","cardText","name","quantity","datetime","empname","empid","inex","screen","StyleSheet","create","flex","alignItems","justifyContent","backgroundColor","primaryBackgroud","padding","width","paddingVertical","margin","textAlign"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport { StyleSheet, View, Text, FlatList, Alert } from 'react-native';\r\nimport firebase from 'firebase';\r\n\r\nimport { Colors } from '../assets/Colors';\r\nimport Card from '../components/Card';\r\n\r\nconst RecordScreen = ({route}) => {\r\n    const orgname = route.params.orgname;\r\n    const [recData, setRecData] = useState([]);\r\n\r\n    useEffect(() => {\r\n          try {  \r\n              const rec = firebase.firestore().collection('organizations').doc(orgname).collection('records').onSnapshot(querySnapshot => {\r\n                  const data = [];\r\n                  querySnapshot.forEach(documentSnapshot => {\r\n                      data.push({\r\n                          ...documentSnapshot.data(),\r\n                          key: documentSnapshot.id\r\n                      });\r\n                  });\r\n                  setRecData(data.sort(function(a,b) {\r\n                      return parseInt(b['mil']) - parseInt(a['mil']);\r\n                  }));\r\n              });\r\n              return () => rec;\r\n          } \r\n          catch (err) {\r\n              Alert.alert('Records Error !');\r\n          }\r\n    }, [])\r\n\r\n    const renderItem = ({item}) => (\r\n        <Card style={styles.item}>\r\n            <Text adjustsFontSizeToFit numberOfLines={1} style={styles.cardText}>ID:   {item.id}</Text>\r\n            <Text adjustsFontSizeToFit numberOfLines={1} style={styles.cardText}>Name: {item.name}</Text>\r\n            <Text adjustsFontSizeToFit numberOfLines={1} style={styles.cardText}>Quantity: {item.quantity}</Text>\r\n            <Text adjustsFontSizeToFit numberOfLines={1} style={styles.cardText}>Date: {item.datetime}</Text>\r\n            <Text adjustsFontSizeToFit numberOfLines={1} style={styles.cardText}>Employee Name: {item.empname}</Text>\r\n            <Text adjustsFontSizeToFit numberOfLines={1} style={styles.cardText}>Employee Id: {item.empid}</Text>\r\n            <Text adjustsFontSizeToFit numberOfLines={1} style={styles.cardText}>In/Ex: {item.inex}</Text>\r\n        </Card>\r\n    );\r\n\r\n    return (\r\n        <View style={styles.screen}>\r\n            <FlatList\r\n                data={recData}\r\n                renderItem={renderItem}/>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    screen: {\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: Colors.primaryBackgroud,\r\n        padding: 10  \r\n    },\r\n\r\n    item: {\r\n        flex: 1,\r\n        width: 300,\r\n        \r\n        alignItems: 'flex-start',\r\n        justifyContent: 'center',\r\n        paddingVertical: 10,\r\n        margin: '5%'\r\n    },\r\n\r\n    cardText: {\r\n        textAlign: 'left',\r\n    }\r\n});\r\n\r\nexport default RecordScreen;"]},"metadata":{},"sourceType":"module"}